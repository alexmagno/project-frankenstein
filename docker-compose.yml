version: '3.8'

services:
  # PostgreSQL Database (Write Side)
  postgres:
    image: postgres:15-alpine
    container_name: frankenstein-postgres
    environment:
      POSTGRES_DB: frankenstein
      POSTGRES_USER: frankenstein
      POSTGRES_PASSWORD: frankenstein123
      POSTGRES_REPLICATION_MODE: primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./infrastructure/docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./infrastructure/docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - frankenstein-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frankenstein"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Read Replica (Analytics & Reporting)
  postgres-read-replica:
    image: postgres:15-alpine
    container_name: frankenstein-postgres-replica
    environment:
      POSTGRES_DB: frankenstein
      POSTGRES_USER: frankenstein
      POSTGRES_PASSWORD: frankenstein123
      POSTGRES_MASTER_SERVICE: postgres
      POSTGRES_REPLICATION_MODE: replica
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator123
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - frankenstein-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frankenstein"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: frankenstein-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: frankenstein
      MONGO_INITDB_ROOT_PASSWORD: frankenstein123
      MONGO_INITDB_DATABASE: frankenstein
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - frankenstein-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/frankenstein --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: frankenstein-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - frankenstein-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: frankenstein-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: frankenstein
      RABBITMQ_DEFAULT_PASS: frankenstein123
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - frankenstein-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: frankenstein-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - frankenstein-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: frankenstein-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - frankenstein-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 30s
      timeout: 10s
      retries: 3

  # LocalStack for AWS Services
  localstack:
    image: localstack/localstack:2.3
    container_name: frankenstein-localstack
    ports:
      - "4566:4566"     # LocalStack Gateway
      - "4510-4559:4510-4559"  # External services port range
    environment:
      DEBUG: 1
      SERVICES: sqs,s3,lambda,iam,cloudformation
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - localstack_data:/tmp/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - frankenstein-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: frankenstein-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - frankenstein-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: frankenstein-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - frankenstein-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: frankenstein-jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # HTTP collector
      - "14250:14250"   # gRPC collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - frankenstein-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: frankenstein-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - frankenstein-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: frankenstein-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - frankenstein-network
    depends_on:
      - elasticsearch

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: frankenstein-logstash
    volumes:
      - ./infrastructure/monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./infrastructure/monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - frankenstein-network
    depends_on:
      - elasticsearch

  # SonarQube for Code Quality
  sonarqube:
    image: sonarqube:10.2-community
    container_name: frankenstein-sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: frankenstein
      SONAR_JDBC_PASSWORD: frankenstein123
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - frankenstein-network
    depends_on:
      - postgres

  # Unleash Feature Flag Server
  unleash:
    image: unleashorg/unleash-server:5.6
    container_name: frankenstein-unleash
    ports:
      - "4242:4242"
    environment:
      DATABASE_HOST: postgres
      DATABASE_NAME: unleash
      DATABASE_USERNAME: frankenstein
      DATABASE_PASSWORD: frankenstein123
      DATABASE_SSL: "false"
      LOG_LEVEL: "warn"
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
    networks:
      - frankenstein-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4242/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  postgres_replica_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  localstack_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

networks:
  frankenstein-network:
    driver: bridge
