input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # For Spring Boot applications using Logstash encoder
  tcp {
    port => 5045
    codec => json_lines
    tags => ["spring-boot"]
  }
}

filter {
  if "spring-boot" in [tags] {
    # Parse Spring Boot JSON logs
    json {
      source => "message"
    }
    
    # Extract service name from logger or add it manually
    if [logger_name] {
      grok {
        match => { "logger_name" => "com\.frankenstein\.(?<service_name>[^\.]+)" }
      }
    }
    
    # Add service name based on container hostname/source
    if ![service_name] {
      if [host] =~ "user-service" {
        mutate { add_field => { "service_name" => "user-service" } }
      } else if [host] =~ "inventory-service" {
        mutate { add_field => { "service_name" => "inventory-service" } }
      } else if [host] =~ "order-service" {
        mutate { add_field => { "service_name" => "order-service" } }
      } else if [host] =~ "payment-service" {
        mutate { add_field => { "service_name" => "payment-service" } }
      } else if [host] =~ "notification-service" {
        mutate { add_field => { "service_name" => "notification-service" } }
      } else if [host] =~ "bff-service" {
        mutate { add_field => { "service_name" => "bff-service" } }
      }
    }
    
    # Parse timestamp
    if [timestamp] {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
      }
    }
    
    # Add environment and container info
    mutate {
      add_field => { 
        "environment" => "${ENVIRONMENT:dev}"
        "container_runtime" => "docker"
        "project" => "frankenstein"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "frankenstein-logs-%{+YYYY.MM.dd}"
  }
  
  # For debugging - remove in production
  stdout {
    codec => rubydebug
  }
}
